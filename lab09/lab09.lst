CCS PCH C Compiler, Version 5.070, 56587               06-jul-17 10:35

               Filename:   C:\Users\Fábio Bends\Documents\PIC\lab09\lab09.lst

               ROM used:   2878 bytes (9%)
                           Largest free fragment is 29890
               RAM used:   16 (1%) at main() level
                           82 (4%) worst case
               Stack used: 0 locations
               Stack size: 31

*
0000:  GOTO   095E
.................... #include <lab09.h> 
.................... #include <18F4550.h> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
0004:  MOVLW  8E
0006:  MOVWF  00
0008:  MOVFF  44,01
000C:  MOVFF  43,02
0010:  CLRF   03
0012:  MOVF   01,F
0014:  BTFSS  FD8.2
0016:  GOTO   0032
001A:  MOVFF  02,01
001E:  CLRF   02
0020:  MOVLW  08
0022:  SUBWF  00,F
0024:  MOVF   01,F
0026:  BTFSS  FD8.2
0028:  GOTO   0032
002C:  CLRF   00
002E:  GOTO   0046
0032:  BCF    FD8.0
0034:  BTFSC  01.7
0036:  GOTO   0044
003A:  RLCF   02,F
003C:  RLCF   01,F
003E:  DECF   00,F
0040:  GOTO   0032
0044:  BCF    01.7
0046:  RETURN 0
0048:  MOVF   0D,W
004A:  BTFSC  FD8.2
004C:  BRA    0198
004E:  MOVWF  19
0050:  MOVF   11,W
0052:  BTFSC  FD8.2
0054:  BRA    0198
0056:  SUBWF  19,F
0058:  BNC   0064
005A:  MOVLW  7F
005C:  ADDWF  19,F
005E:  BTFSC  FD8.0
0060:  BRA    0198
0062:  BRA    0070
0064:  MOVLW  81
0066:  SUBWF  19,F
0068:  BTFSS  FD8.0
006A:  BRA    0198
006C:  BTFSC  FD8.2
006E:  BRA    0198
0070:  MOVFF  19,00
0074:  CLRF   01
0076:  CLRF   02
0078:  CLRF   03
007A:  CLRF   18
007C:  MOVFF  0E,17
0080:  BSF    17.7
0082:  MOVFF  0F,16
0086:  MOVFF  10,15
008A:  MOVLW  19
008C:  MOVWF  19
008E:  MOVF   14,W
0090:  SUBWF  15,F
0092:  BC    00AE
0094:  MOVLW  01
0096:  SUBWF  16,F
0098:  BC    00AE
009A:  SUBWF  17,F
009C:  BC    00AE
009E:  SUBWF  18,F
00A0:  BC    00AE
00A2:  INCF   18,F
00A4:  INCF   17,F
00A6:  INCF   16,F
00A8:  MOVF   14,W
00AA:  ADDWF  15,F
00AC:  BRA    00FE
00AE:  MOVF   13,W
00B0:  SUBWF  16,F
00B2:  BC    00D8
00B4:  MOVLW  01
00B6:  SUBWF  17,F
00B8:  BC    00D8
00BA:  SUBWF  18,F
00BC:  BC    00D8
00BE:  INCF   18,F
00C0:  INCF   17,F
00C2:  MOVF   13,W
00C4:  ADDWF  16,F
00C6:  MOVF   14,W
00C8:  ADDWF  15,F
00CA:  BNC   00FE
00CC:  INCF   16,F
00CE:  BNZ   00FE
00D0:  INCF   17,F
00D2:  BNZ   00FE
00D4:  INCF   18,F
00D6:  BRA    00FE
00D8:  MOVF   12,W
00DA:  IORLW  80
00DC:  SUBWF  17,F
00DE:  BC    00FC
00E0:  MOVLW  01
00E2:  SUBWF  18,F
00E4:  BC    00FC
00E6:  INCF   18,F
00E8:  MOVF   12,W
00EA:  IORLW  80
00EC:  ADDWF  17,F
00EE:  MOVF   13,W
00F0:  ADDWF  16,F
00F2:  BNC   00C6
00F4:  INCF   17,F
00F6:  BNZ   00C6
00F8:  INCF   18,F
00FA:  BRA    00C6
00FC:  BSF    03.0
00FE:  DECFSZ 19,F
0100:  BRA    0104
0102:  BRA    011A
0104:  BCF    FD8.0
0106:  RLCF   15,F
0108:  RLCF   16,F
010A:  RLCF   17,F
010C:  RLCF   18,F
010E:  BCF    FD8.0
0110:  RLCF   03,F
0112:  RLCF   02,F
0114:  RLCF   01,F
0116:  RLCF   1A,F
0118:  BRA    008E
011A:  BTFSS  1A.0
011C:  BRA    012A
011E:  BCF    FD8.0
0120:  RRCF   01,F
0122:  RRCF   02,F
0124:  RRCF   03,F
0126:  RRCF   1A,F
0128:  BRA    012E
012A:  DECF   00,F
012C:  BZ    0198
012E:  BTFSC  1A.7
0130:  BRA    016E
0132:  BCF    FD8.0
0134:  RLCF   15,F
0136:  RLCF   16,F
0138:  RLCF   17,F
013A:  RLCF   18,F
013C:  MOVF   14,W
013E:  SUBWF  15,F
0140:  BC    0150
0142:  MOVLW  01
0144:  SUBWF  16,F
0146:  BC    0150
0148:  SUBWF  17,F
014A:  BC    0150
014C:  SUBWF  18,F
014E:  BNC   0184
0150:  MOVF   13,W
0152:  SUBWF  16,F
0154:  BC    0160
0156:  MOVLW  01
0158:  SUBWF  17,F
015A:  BC    0160
015C:  SUBWF  18,F
015E:  BNC   0184
0160:  MOVF   12,W
0162:  IORLW  80
0164:  SUBWF  17,F
0166:  BC    016E
0168:  MOVLW  01
016A:  SUBWF  18,F
016C:  BNC   0184
016E:  INCF   03,F
0170:  BNZ   0184
0172:  INCF   02,F
0174:  BNZ   0184
0176:  INCF   01,F
0178:  BNZ   0184
017A:  INCF   00,F
017C:  BZ    0198
017E:  RRCF   01,F
0180:  RRCF   02,F
0182:  RRCF   03,F
0184:  MOVFF  0E,19
0188:  MOVF   12,W
018A:  XORWF  19,F
018C:  BTFSS  19.7
018E:  BRA    0194
0190:  BSF    01.7
0192:  BRA    01A0
0194:  BCF    01.7
0196:  BRA    01A0
0198:  CLRF   00
019A:  CLRF   01
019C:  CLRF   02
019E:  CLRF   03
01A0:  GOTO   09CC (RETURN)
01A4:  MOVF   43,W
01A6:  BTFSC  FD8.2
01A8:  BRA    028C
01AA:  MOVWF  00
01AC:  MOVF   47,W
01AE:  BTFSC  FD8.2
01B0:  BRA    028C
01B2:  ADDWF  00,F
01B4:  BNC   01BE
01B6:  MOVLW  81
01B8:  ADDWF  00,F
01BA:  BC    028C
01BC:  BRA    01C6
01BE:  MOVLW  7F
01C0:  SUBWF  00,F
01C2:  BNC   028C
01C4:  BZ    028C
01C6:  MOVFF  44,4B
01CA:  MOVF   48,W
01CC:  XORWF  4B,F
01CE:  BSF    44.7
01D0:  BSF    48.7
01D2:  MOVF   46,W
01D4:  MULWF  4A
01D6:  MOVFF  FF4,4D
01DA:  MOVF   45,W
01DC:  MULWF  49
01DE:  MOVFF  FF4,03
01E2:  MOVFF  FF3,4C
01E6:  MULWF  4A
01E8:  MOVF   FF3,W
01EA:  ADDWF  4D,F
01EC:  MOVF   FF4,W
01EE:  ADDWFC 4C,F
01F0:  MOVLW  00
01F2:  ADDWFC 03,F
01F4:  MOVF   46,W
01F6:  MULWF  49
01F8:  MOVF   FF3,W
01FA:  ADDWF  4D,F
01FC:  MOVF   FF4,W
01FE:  ADDWFC 4C,F
0200:  MOVLW  00
0202:  CLRF   02
0204:  ADDWFC 03,F
0206:  ADDWFC 02,F
0208:  MOVF   44,W
020A:  MULWF  4A
020C:  MOVF   FF3,W
020E:  ADDWF  4C,F
0210:  MOVF   FF4,W
0212:  ADDWFC 03,F
0214:  MOVLW  00
0216:  ADDWFC 02,F
0218:  MOVF   44,W
021A:  MULWF  49
021C:  MOVF   FF3,W
021E:  ADDWF  03,F
0220:  MOVF   FF4,W
0222:  ADDWFC 02,F
0224:  MOVLW  00
0226:  CLRF   01
0228:  ADDWFC 01,F
022A:  MOVF   46,W
022C:  MULWF  48
022E:  MOVF   FF3,W
0230:  ADDWF  4C,F
0232:  MOVF   FF4,W
0234:  ADDWFC 03,F
0236:  MOVLW  00
0238:  ADDWFC 02,F
023A:  ADDWFC 01,F
023C:  MOVF   45,W
023E:  MULWF  48
0240:  MOVF   FF3,W
0242:  ADDWF  03,F
0244:  MOVF   FF4,W
0246:  ADDWFC 02,F
0248:  MOVLW  00
024A:  ADDWFC 01,F
024C:  MOVF   44,W
024E:  MULWF  48
0250:  MOVF   FF3,W
0252:  ADDWF  02,F
0254:  MOVF   FF4,W
0256:  ADDWFC 01,F
0258:  INCF   00,F
025A:  BTFSC  01.7
025C:  BRA    0268
025E:  RLCF   4C,F
0260:  RLCF   03,F
0262:  RLCF   02,F
0264:  RLCF   01,F
0266:  DECF   00,F
0268:  MOVLW  00
026A:  BTFSS  4C.7
026C:  BRA    0282
026E:  INCF   03,F
0270:  ADDWFC 02,F
0272:  ADDWFC 01,F
0274:  MOVF   01,W
0276:  BNZ   0282
0278:  MOVF   02,W
027A:  BNZ   0282
027C:  MOVF   03,W
027E:  BNZ   0282
0280:  INCF   00,F
0282:  BTFSC  4B.7
0284:  BSF    01.7
0286:  BTFSS  4B.7
0288:  BCF    01.7
028A:  BRA    0294
028C:  CLRF   00
028E:  CLRF   01
0290:  CLRF   02
0292:  CLRF   03
0294:  RETURN 0
0296:  MOVLW  80
0298:  BTFSC  FD8.1
029A:  XORWF  48,F
029C:  CLRF   4D
029E:  CLRF   4E
02A0:  MOVFF  44,4C
02A4:  MOVF   48,W
02A6:  XORWF  4C,F
02A8:  MOVF   43,W
02AA:  BTFSC  FD8.2
02AC:  BRA    0466
02AE:  MOVWF  4B
02B0:  MOVWF  00
02B2:  MOVF   47,W
02B4:  BTFSC  FD8.2
02B6:  BRA    0478
02B8:  SUBWF  4B,F
02BA:  BTFSC  FD8.2
02BC:  BRA    03C0
02BE:  BNC   033A
02C0:  MOVFF  48,51
02C4:  BSF    51.7
02C6:  MOVFF  49,50
02CA:  MOVFF  4A,4F
02CE:  CLRF   4E
02D0:  BCF    FD8.0
02D2:  RRCF   51,F
02D4:  RRCF   50,F
02D6:  RRCF   4F,F
02D8:  RRCF   4E,F
02DA:  DECFSZ 4B,F
02DC:  BRA    02CE
02DE:  BTFSS  4C.7
02E0:  BRA    02E8
02E2:  BSF    4D.0
02E4:  BRA    04A0
02E6:  BCF    4D.0
02E8:  BCF    4B.0
02EA:  BSF    4D.4
02EC:  CLRF   FEA
02EE:  MOVLW  46
02F0:  MOVWF  FE9
02F2:  BRA    04C6
02F4:  BCF    4D.4
02F6:  BTFSC  4C.7
02F8:  BRA    030E
02FA:  BTFSS  4B.0
02FC:  BRA    0324
02FE:  RRCF   51,F
0300:  RRCF   50,F
0302:  RRCF   4F,F
0304:  RRCF   4E,F
0306:  INCF   00,F
0308:  BTFSC  FD8.2
030A:  BRA    0496
030C:  BRA    0324
030E:  BTFSC  51.7
0310:  BRA    032A
0312:  BCF    FD8.0
0314:  RLCF   4E,F
0316:  RLCF   4F,F
0318:  RLCF   50,F
031A:  RLCF   51,F
031C:  DECF   00,F
031E:  BTFSC  FD8.2
0320:  BRA    0496
0322:  BRA    030E
0324:  BSF    4D.6
0326:  BRA    03FE
0328:  BCF    4D.6
032A:  MOVFF  44,4C
032E:  BTFSS  44.7
0330:  BRA    0336
0332:  BSF    51.7
0334:  BRA    0488
0336:  BCF    51.7
0338:  BRA    0488
033A:  MOVFF  47,4B
033E:  MOVFF  47,00
0342:  MOVF   43,W
0344:  SUBWF  4B,F
0346:  MOVFF  44,51
034A:  BSF    51.7
034C:  MOVFF  45,50
0350:  MOVFF  46,4F
0354:  CLRF   4E
0356:  BCF    FD8.0
0358:  RRCF   51,F
035A:  RRCF   50,F
035C:  RRCF   4F,F
035E:  RRCF   4E,F
0360:  DECFSZ 4B,F
0362:  BRA    0354
0364:  BTFSS  4C.7
0366:  BRA    036E
0368:  BSF    4D.1
036A:  BRA    04A0
036C:  BCF    4D.1
036E:  BCF    4B.0
0370:  BSF    4D.5
0372:  CLRF   FEA
0374:  MOVLW  4A
0376:  MOVWF  FE9
0378:  BRA    04C6
037A:  BCF    4D.5
037C:  BTFSC  4C.7
037E:  BRA    0394
0380:  BTFSS  4B.0
0382:  BRA    03AA
0384:  RRCF   51,F
0386:  RRCF   50,F
0388:  RRCF   4F,F
038A:  RRCF   4E,F
038C:  INCF   00,F
038E:  BTFSC  FD8.2
0390:  BRA    0496
0392:  BRA    03AA
0394:  BTFSC  51.7
0396:  BRA    03B0
0398:  BCF    FD8.0
039A:  RLCF   4E,F
039C:  RLCF   4F,F
039E:  RLCF   50,F
03A0:  RLCF   51,F
03A2:  DECF   00,F
03A4:  BTFSC  FD8.2
03A6:  BRA    0496
03A8:  BRA    0394
03AA:  BSF    4D.7
03AC:  BRA    03FE
03AE:  BCF    4D.7
03B0:  MOVFF  48,4C
03B4:  BTFSS  48.7
03B6:  BRA    03BC
03B8:  BSF    51.7
03BA:  BRA    0488
03BC:  BCF    51.7
03BE:  BRA    0488
03C0:  MOVFF  48,51
03C4:  BSF    51.7
03C6:  MOVFF  49,50
03CA:  MOVFF  4A,4F
03CE:  BTFSS  4C.7
03D0:  BRA    03DA
03D2:  BCF    51.7
03D4:  BSF    4D.2
03D6:  BRA    04A0
03D8:  BCF    4D.2
03DA:  CLRF   4E
03DC:  BCF    4B.0
03DE:  CLRF   FEA
03E0:  MOVLW  46
03E2:  MOVWF  FE9
03E4:  BRA    04C6
03E6:  BTFSC  4C.7
03E8:  BRA    0422
03EA:  MOVFF  44,4C
03EE:  BTFSS  4B.0
03F0:  BRA    03FE
03F2:  RRCF   51,F
03F4:  RRCF   50,F
03F6:  RRCF   4F,F
03F8:  RRCF   4E,F
03FA:  INCF   00,F
03FC:  BZ    0496
03FE:  BTFSS  4E.7
0400:  BRA    0418
0402:  INCF   4F,F
0404:  BNZ   0418
0406:  INCF   50,F
0408:  BNZ   0418
040A:  INCF   51,F
040C:  BNZ   0418
040E:  RRCF   51,F
0410:  RRCF   50,F
0412:  RRCF   4F,F
0414:  INCF   00,F
0416:  BZ    0496
0418:  BTFSC  4D.6
041A:  BRA    0328
041C:  BTFSC  4D.7
041E:  BRA    03AE
0420:  BRA    045A
0422:  MOVLW  80
0424:  XORWF  51,F
0426:  BTFSS  51.7
0428:  BRA    0432
042A:  BRA    04A0
042C:  MOVFF  48,4C
0430:  BRA    0446
0432:  MOVFF  44,4C
0436:  MOVF   51,F
0438:  BNZ   0446
043A:  MOVF   50,F
043C:  BNZ   0446
043E:  MOVF   4F,F
0440:  BNZ   0446
0442:  CLRF   00
0444:  BRA    0488
0446:  BTFSC  51.7
0448:  BRA    045A
044A:  BCF    FD8.0
044C:  RLCF   4E,F
044E:  RLCF   4F,F
0450:  RLCF   50,F
0452:  RLCF   51,F
0454:  DECFSZ 00,F
0456:  BRA    0446
0458:  BRA    0496
045A:  BTFSS  4C.7
045C:  BRA    0462
045E:  BSF    51.7
0460:  BRA    0488
0462:  BCF    51.7
0464:  BRA    0488
0466:  MOVFF  47,00
046A:  MOVFF  48,51
046E:  MOVFF  49,50
0472:  MOVFF  4A,4F
0476:  BRA    0488
0478:  MOVFF  43,00
047C:  MOVFF  44,51
0480:  MOVFF  45,50
0484:  MOVFF  46,4F
0488:  MOVFF  51,01
048C:  MOVFF  50,02
0490:  MOVFF  4F,03
0494:  BRA    04FE
0496:  CLRF   00
0498:  CLRF   01
049A:  CLRF   02
049C:  CLRF   03
049E:  BRA    04FE
04A0:  CLRF   4E
04A2:  COMF   4F,F
04A4:  COMF   50,F
04A6:  COMF   51,F
04A8:  COMF   4E,F
04AA:  INCF   4E,F
04AC:  BNZ   04B8
04AE:  INCF   4F,F
04B0:  BNZ   04B8
04B2:  INCF   50,F
04B4:  BNZ   04B8
04B6:  INCF   51,F
04B8:  BTFSC  4D.0
04BA:  BRA    02E6
04BC:  BTFSC  4D.1
04BE:  BRA    036C
04C0:  BTFSC  4D.2
04C2:  BRA    03D8
04C4:  BRA    042C
04C6:  MOVF   FEF,W
04C8:  ADDWF  4F,F
04CA:  BNC   04D6
04CC:  INCF   50,F
04CE:  BNZ   04D6
04D0:  INCF   51,F
04D2:  BTFSC  FD8.2
04D4:  BSF    4B.0
04D6:  MOVF   FED,F
04D8:  MOVF   FEF,W
04DA:  ADDWF  50,F
04DC:  BNC   04E4
04DE:  INCF   51,F
04E0:  BTFSC  FD8.2
04E2:  BSF    4B.0
04E4:  MOVF   FED,F
04E6:  MOVF   FEF,W
04E8:  BTFSC  FEF.7
04EA:  BRA    04EE
04EC:  XORLW  80
04EE:  ADDWF  51,F
04F0:  BTFSC  FD8.0
04F2:  BSF    4B.0
04F4:  BTFSC  4D.4
04F6:  BRA    02F4
04F8:  BTFSC  4D.5
04FA:  BRA    037A
04FC:  BRA    03E6
04FE:  RETURN 0
0500:  MOVFF  40,47
0504:  MOVF   44,W
0506:  XORWF  47,F
0508:  BTFSS  47.7
050A:  BRA    0516
050C:  BCF    FD8.2
050E:  BCF    FD8.0
0510:  BTFSC  40.7
0512:  BSF    FD8.0
0514:  BRA    0574
0516:  MOVFF  40,47
051A:  MOVFF  43,48
051E:  MOVF   3F,W
0520:  SUBWF  48,F
0522:  BZ    0530
0524:  BTFSS  47.7
0526:  BRA    0574
0528:  MOVF   FD8,W
052A:  XORLW  01
052C:  MOVWF  FD8
052E:  BRA    0574
0530:  MOVFF  44,48
0534:  MOVF   40,W
0536:  SUBWF  48,F
0538:  BZ    0546
053A:  BTFSS  47.7
053C:  BRA    0574
053E:  MOVF   FD8,W
0540:  XORLW  01
0542:  MOVWF  FD8
0544:  BRA    0574
0546:  MOVFF  45,48
054A:  MOVF   41,W
054C:  SUBWF  48,F
054E:  BZ    055C
0550:  BTFSS  47.7
0552:  BRA    0574
0554:  MOVF   FD8,W
0556:  XORLW  01
0558:  MOVWF  FD8
055A:  BRA    0574
055C:  MOVFF  46,48
0560:  MOVF   42,W
0562:  SUBWF  48,F
0564:  BZ    0572
0566:  BTFSS  47.7
0568:  BRA    0574
056A:  MOVF   FD8,W
056C:  XORLW  01
056E:  MOVWF  FD8
0570:  BRA    0574
0572:  BCF    FD8.0
0574:  GOTO   0620 (RETURN)
0578:  MOVLW  8E
057A:  MOVWF  00
057C:  MOVF   3F,W
057E:  SUBWF  00,F
0580:  MOVFF  40,02
0584:  MOVFF  41,01
0588:  BSF    02.7
058A:  MOVF   00,F
058C:  BZ    05A0
058E:  BCF    FD8.0
0590:  MOVF   02,F
0592:  BNZ   0598
0594:  MOVF   01,F
0596:  BZ    05A0
0598:  RRCF   02,F
059A:  RRCF   01,F
059C:  DECFSZ 00,F
059E:  BRA    058E
05A0:  BTFSS  40.7
05A2:  BRA    05AE
05A4:  COMF   01,F
05A6:  COMF   02,F
05A8:  INCF   01,F
05AA:  BTFSC  FD8.2
05AC:  INCF   02,F
05AE:  RETURN 0
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay(crystal=20000000) 
*
0936:  CLRF   FEA
0938:  MOVLW  09
093A:  MOVWF  FE9
093C:  MOVF   FEF,W
093E:  BZ    095A
0940:  MOVLW  06
0942:  MOVWF  01
0944:  CLRF   00
0946:  DECFSZ 00,F
0948:  BRA    0946
094A:  DECFSZ 01,F
094C:  BRA    0944
094E:  MOVLW  7B
0950:  MOVWF  00
0952:  DECFSZ 00,F
0954:  BRA    0952
0956:  DECFSZ FEF,F
0958:  BRA    0940
095A:  GOTO   0B3A (RETURN)
....................  
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } else return 0; 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
*
05B0:  CLRF   24
05B2:  CLRF   23
05B4:  CLRF   22
05B6:  MOVLW  7F
05B8:  MOVWF  21
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
05BA:  MOVLW  7E
05BC:  MOVWF  2B
05BE:  MOVLW  80
05C0:  MOVWF  2C
05C2:  CLRF   2D
05C4:  CLRF   2E
05C6:  MOVLW  7A
05C8:  MOVWF  2F
05CA:  MOVLW  2A
05CC:  MOVWF  30
05CE:  MOVLW  AA
05D0:  MOVWF  31
05D2:  MOVLW  A3
05D4:  MOVWF  32
05D6:  MOVLW  75
05D8:  MOVWF  33
05DA:  MOVLW  B6
05DC:  MOVWF  34
05DE:  MOVLW  09
05E0:  MOVWF  35
05E2:  MOVLW  B4
05E4:  MOVWF  36
05E6:  MOVLW  6F
05E8:  MOVWF  37
05EA:  MOVLW  4F
05EC:  MOVWF  38
05EE:  MOVLW  B6
05F0:  MOVWF  39
05F2:  MOVLW  AA
05F4:  MOVWF  3A
05F6:  MOVLW  69
05F8:  MOVWF  3B
05FA:  MOVLW  8B
05FC:  MOVWF  3C
05FE:  MOVLW  F6
0600:  MOVWF  3D
0602:  MOVLW  E8
0604:  MOVWF  3E
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
0606:  MOVFF  18,42
060A:  MOVFF  17,41
060E:  MOVFF  16,40
0612:  MOVFF  15,3F
0616:  CLRF   46
0618:  CLRF   45
061A:  CLRF   44
061C:  CLRF   43
061E:  BRA    0500
0620:  BNC   0628
0622:  MOVF   16,W
0624:  XORLW  80
0626:  MOVWF  16
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
0628:  MOVFF  18,46
062C:  MOVFF  17,45
0630:  MOVFF  16,44
0634:  MOVFF  15,43
0638:  MOVLW  83
063A:  MOVWF  4A
063C:  MOVLW  F9
063E:  MOVWF  49
0640:  MOVLW  22
0642:  MOVWF  48
0644:  MOVLW  7E
0646:  MOVWF  47
0648:  RCALL  01A4
064A:  MOVFF  03,42
064E:  MOVFF  02,41
0652:  MOVFF  01,40
0656:  MOVFF  00,3F
065A:  RCALL  0578
065C:  MOVFF  01,25
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
0660:  MOVFF  18,46
0664:  MOVFF  17,45
0668:  MOVFF  16,44
066C:  MOVFF  15,43
0670:  MOVLW  83
0672:  MOVWF  4A
0674:  MOVLW  F9
0676:  MOVWF  49
0678:  MOVLW  22
067A:  MOVWF  48
067C:  MOVLW  7E
067E:  MOVWF  47
0680:  RCALL  01A4
0682:  MOVFF  03,42
0686:  MOVFF  02,41
068A:  MOVFF  01,40
068E:  MOVFF  00,3F
0692:  CLRF   44
0694:  MOVFF  25,43
0698:  RCALL  0004
069A:  BSF    FD8.1
069C:  MOVFF  42,46
06A0:  MOVFF  41,45
06A4:  MOVFF  40,44
06A8:  MOVFF  3F,43
06AC:  MOVFF  03,4A
06B0:  MOVFF  02,49
06B4:  MOVFF  01,48
06B8:  MOVFF  00,47
06BC:  RCALL  0296
06BE:  MOVFF  03,2A
06C2:  MOVFF  02,29
06C6:  MOVFF  01,28
06CA:  MOVFF  00,27
....................    quad = quad % 4;                    // quadrant (0 to 3) 
06CE:  MOVLW  03
06D0:  ANDWF  25,F
....................  
....................    if (quad == 0 || quad == 2) 
06D2:  MOVF   25,F
06D4:  BZ    06DC
06D6:  MOVF   25,W
06D8:  SUBLW  02
06DA:  BNZ   0710
....................       t = frac * PI_DIV_BY_TWO; 
06DC:  MOVFF  2A,46
06E0:  MOVFF  29,45
06E4:  MOVFF  28,44
06E8:  MOVFF  27,43
06EC:  MOVLW  DB
06EE:  MOVWF  4A
06F0:  MOVLW  0F
06F2:  MOVWF  49
06F4:  MOVLW  49
06F6:  MOVWF  48
06F8:  MOVLW  7F
06FA:  MOVWF  47
06FC:  RCALL  01A4
06FE:  MOVFF  03,20
0702:  MOVFF  02,1F
0706:  MOVFF  01,1E
070A:  MOVFF  00,1D
070E:  BRA    07D6
....................    else if (quad == 1) 
0710:  DECFSZ 25,W
0712:  BRA    0776
....................       t = (1-frac) * PI_DIV_BY_TWO; 
0714:  BSF    FD8.1
0716:  CLRF   46
0718:  CLRF   45
071A:  CLRF   44
071C:  MOVLW  7F
071E:  MOVWF  43
0720:  MOVFF  2A,4A
0724:  MOVFF  29,49
0728:  MOVFF  28,48
072C:  MOVFF  27,47
0730:  RCALL  0296
0732:  MOVFF  03,42
0736:  MOVFF  02,41
073A:  MOVFF  01,40
073E:  MOVFF  00,3F
0742:  MOVFF  03,46
0746:  MOVFF  02,45
074A:  MOVFF  01,44
074E:  MOVFF  00,43
0752:  MOVLW  DB
0754:  MOVWF  4A
0756:  MOVLW  0F
0758:  MOVWF  49
075A:  MOVLW  49
075C:  MOVWF  48
075E:  MOVLW  7F
0760:  MOVWF  47
0762:  RCALL  01A4
0764:  MOVFF  03,20
0768:  MOVFF  02,1F
076C:  MOVFF  01,1E
0770:  MOVFF  00,1D
0774:  BRA    07D6
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
0776:  BSF    FD8.1
0778:  MOVFF  2A,46
077C:  MOVFF  29,45
0780:  MOVFF  28,44
0784:  MOVFF  27,43
0788:  CLRF   4A
078A:  CLRF   49
078C:  CLRF   48
078E:  MOVLW  7F
0790:  MOVWF  47
0792:  RCALL  0296
0794:  MOVFF  03,42
0798:  MOVFF  02,41
079C:  MOVFF  01,40
07A0:  MOVFF  00,3F
07A4:  MOVFF  03,46
07A8:  MOVFF  02,45
07AC:  MOVFF  01,44
07B0:  MOVFF  00,43
07B4:  MOVLW  DB
07B6:  MOVWF  4A
07B8:  MOVLW  0F
07BA:  MOVWF  49
07BC:  MOVLW  49
07BE:  MOVWF  48
07C0:  MOVLW  7F
07C2:  MOVWF  47
07C4:  RCALL  01A4
07C6:  MOVFF  03,20
07CA:  MOVFF  02,1F
07CE:  MOVFF  01,1E
07D2:  MOVFF  00,1D
....................  
....................    y = 1.0; 
07D6:  CLRF   1C
07D8:  CLRF   1B
07DA:  CLRF   1A
07DC:  MOVLW  7F
07DE:  MOVWF  19
....................    t = t * t; 
07E0:  MOVFF  20,46
07E4:  MOVFF  1F,45
07E8:  MOVFF  1E,44
07EC:  MOVFF  1D,43
07F0:  MOVFF  20,4A
07F4:  MOVFF  1F,49
07F8:  MOVFF  1E,48
07FC:  MOVFF  1D,47
0800:  RCALL  01A4
0802:  MOVFF  03,20
0806:  MOVFF  02,1F
080A:  MOVFF  01,1E
080E:  MOVFF  00,1D
....................    for (i = 0; i <= 4; i++) 
0812:  CLRF   26
0814:  MOVF   26,W
0816:  SUBLW  04
0818:  BNC   08C8
....................    { 
....................       t2 = t2 * t; 
081A:  MOVFF  24,46
081E:  MOVFF  23,45
0822:  MOVFF  22,44
0826:  MOVFF  21,43
082A:  MOVFF  20,4A
082E:  MOVFF  1F,49
0832:  MOVFF  1E,48
0836:  MOVFF  1D,47
083A:  RCALL  01A4
083C:  MOVFF  03,24
0840:  MOVFF  02,23
0844:  MOVFF  01,22
0848:  MOVFF  00,21
....................       y = y + p[i] * t2; 
084C:  MOVF   26,W
084E:  MULLW  04
0850:  MOVF   FF3,W
0852:  CLRF   03
0854:  ADDLW  2B
0856:  MOVWF  FE9
0858:  MOVLW  00
085A:  ADDWFC 03,W
085C:  MOVWF  FEA
085E:  MOVFF  FEF,43
0862:  MOVFF  FEC,44
0866:  MOVFF  FEC,45
086A:  MOVFF  FEC,46
086E:  MOVFF  24,4A
0872:  MOVFF  23,49
0876:  MOVFF  22,48
087A:  MOVFF  21,47
087E:  RCALL  01A4
0880:  MOVFF  FEA,40
0884:  MOVFF  FE9,3F
0888:  BCF    FD8.1
088A:  MOVFF  1C,46
088E:  MOVFF  1B,45
0892:  MOVFF  1A,44
0896:  MOVFF  19,43
089A:  MOVFF  03,4A
089E:  MOVFF  02,49
08A2:  MOVFF  01,48
08A6:  MOVFF  00,47
08AA:  RCALL  0296
08AC:  MOVFF  40,FEA
08B0:  MOVFF  3F,FE9
08B4:  MOVFF  03,1C
08B8:  MOVFF  02,1B
08BC:  MOVFF  01,1A
08C0:  MOVFF  00,19
08C4:  INCF   26,F
08C6:  BRA    0814
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
08C8:  MOVF   25,W
08CA:  SUBLW  02
08CC:  BZ    08D2
08CE:  DECFSZ 25,W
08D0:  BRA    08D8
....................       y = -y;  // correct sign 
08D2:  MOVF   1A,W
08D4:  XORLW  80
08D6:  MOVWF  1A
....................  
....................    return (y); 
08D8:  MOVFF  19,00
08DC:  MOVFF  1A,01
08E0:  MOVFF  1B,02
08E4:  MOVFF  1C,03
08E8:  GOTO   0932 (RETURN)
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
08EC:  BSF    FD8.1
08EE:  MOVFF  10,46
08F2:  MOVFF  0F,45
08F6:  MOVFF  0E,44
08FA:  MOVFF  0D,43
08FE:  MOVLW  DB
0900:  MOVWF  4A
0902:  MOVLW  0F
0904:  MOVWF  49
0906:  MOVLW  49
0908:  MOVWF  48
090A:  MOVLW  7F
090C:  MOVWF  47
090E:  RCALL  0296
0910:  MOVFF  03,14
0914:  MOVFF  02,13
0918:  MOVFF  01,12
091C:  MOVFF  00,11
0920:  MOVFF  03,18
0924:  MOVFF  02,17
0928:  MOVFF  01,16
092C:  MOVFF  00,15
0930:  BRA    05B0
0932:  GOTO   0A22 (RETURN)
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... void main() 
*
095E:  CLRF   FF8
0960:  BCF    FD0.7
0962:  MOVF   FC1,W
0964:  ANDLW  C0
0966:  IORLW  0F
0968:  MOVWF  FC1
096A:  MOVLW  07
096C:  MOVWF  FB4
.................... { 
....................    int16 cnt, pwmS;                    // variáveis 
....................    setup_timer_2(T2_DIV_BY_1,127,1);   // tempo do timer2 
096E:  MOVLW  00
0970:  IORLW  04
0972:  MOVWF  FCA
0974:  MOVLW  7F
0976:  MOVWF  FCB
....................    // T=1/12M*1*128=10,67 us; 
....................    // f=1/T=93,5 KHz 
....................    setup_port_a(NO_ANALOGS); 
0978:  MOVF   FC1,W
097A:  ANDLW  C0
097C:  IORLW  0F
097E:  MOVWF  FC1
....................    setup_ccp1(CCP_PWM); 
0980:  BCF    F94.2
0982:  BCF    F8B.2
0984:  MOVLW  0C
0986:  MOVWF  FBD
0988:  CLRF   FB7
098A:  CLRF   FB6
....................    // set_pwm_duty(1,1023); 
....................    cnt=0; 
098C:  CLRF   06
098E:  CLRF   05
....................    while(TRUE) 
....................    { 
....................    pwmS=((sin(((float)cnt/1000)*PI)+1)*512)+1; // calculo do período de oscilação 
0990:  MOVFF  06,44
0994:  MOVFF  05,43
0998:  CALL   0004
099C:  MOVFF  03,0C
09A0:  MOVFF  02,0B
09A4:  MOVFF  01,0A
09A8:  MOVFF  00,09
09AC:  MOVFF  03,10
09B0:  MOVFF  02,0F
09B4:  MOVFF  01,0E
09B8:  MOVFF  00,0D
09BC:  CLRF   14
09BE:  CLRF   13
09C0:  MOVLW  7A
09C2:  MOVWF  12
09C4:  MOVLW  88
09C6:  MOVWF  11
09C8:  GOTO   0048
09CC:  MOVFF  03,0C
09D0:  MOVFF  02,0B
09D4:  MOVFF  01,0A
09D8:  MOVFF  00,09
09DC:  MOVFF  03,46
09E0:  MOVFF  02,45
09E4:  MOVFF  01,44
09E8:  MOVFF  00,43
09EC:  MOVLW  DB
09EE:  MOVWF  4A
09F0:  MOVLW  0F
09F2:  MOVWF  49
09F4:  MOVLW  49
09F6:  MOVWF  48
09F8:  MOVLW  80
09FA:  MOVWF  47
09FC:  CALL   01A4
0A00:  MOVFF  03,0C
0A04:  MOVFF  02,0B
0A08:  MOVFF  01,0A
0A0C:  MOVFF  00,09
0A10:  MOVFF  03,10
0A14:  MOVFF  02,0F
0A18:  MOVFF  01,0E
0A1C:  MOVFF  00,0D
0A20:  BRA    08EC
0A22:  MOVFF  03,0C
0A26:  MOVFF  02,0B
0A2A:  MOVFF  01,0A
0A2E:  MOVFF  00,09
0A32:  MOVFF  FEA,0E
0A36:  MOVFF  FE9,0D
0A3A:  BCF    FD8.1
0A3C:  MOVFF  03,46
0A40:  MOVFF  02,45
0A44:  MOVFF  01,44
0A48:  MOVFF  00,43
0A4C:  CLRF   4A
0A4E:  CLRF   49
0A50:  CLRF   48
0A52:  MOVLW  7F
0A54:  MOVWF  47
0A56:  RCALL  0296
0A58:  MOVFF  0E,FEA
0A5C:  MOVFF  0D,FE9
0A60:  MOVFF  03,0C
0A64:  MOVFF  02,0B
0A68:  MOVFF  01,0A
0A6C:  MOVFF  00,09
0A70:  MOVFF  03,46
0A74:  MOVFF  02,45
0A78:  MOVFF  01,44
0A7C:  MOVFF  00,43
0A80:  CLRF   4A
0A82:  CLRF   49
0A84:  CLRF   48
0A86:  MOVLW  88
0A88:  MOVWF  47
0A8A:  CALL   01A4
0A8E:  MOVFF  03,0C
0A92:  MOVFF  02,0B
0A96:  MOVFF  01,0A
0A9A:  MOVFF  00,09
0A9E:  MOVFF  FEA,10
0AA2:  MOVFF  FE9,0F
0AA6:  BCF    FD8.1
0AA8:  MOVFF  03,46
0AAC:  MOVFF  02,45
0AB0:  MOVFF  01,44
0AB4:  MOVFF  00,43
0AB8:  CLRF   4A
0ABA:  CLRF   49
0ABC:  CLRF   48
0ABE:  MOVLW  7F
0AC0:  MOVWF  47
0AC2:  CALL   0296
0AC6:  MOVFF  10,FEA
0ACA:  MOVFF  0F,FE9
0ACE:  MOVFF  03,42
0AD2:  MOVFF  02,41
0AD6:  MOVFF  01,40
0ADA:  MOVFF  00,3F
0ADE:  RCALL  0578
0AE0:  MOVFF  02,08
0AE4:  MOVFF  01,07
....................    set_pwm1_duty(pwmS);                        // implementação da oscilação 
0AE8:  MOVFF  08,02
0AEC:  MOVFF  07,01
0AF0:  RRCF   02,F
0AF2:  RRCF   01,F
0AF4:  RRCF   02,F
0AF6:  RRCF   01,F
0AF8:  RRCF   02,F
0AFA:  MOVFF  01,FBE
0AFE:  RRCF   02,F
0B00:  RRCF   02,W
0B02:  ANDLW  30
0B04:  MOVWF  00
0B06:  MOVF   FBD,W
0B08:  ANDLW  CF
0B0A:  IORWF  00,W
0B0C:  MOVWF  FBD
....................    cnt=(cnt==2000) ? 0 : cnt+1;                // alteração do pulso 
0B0E:  MOVF   05,W
0B10:  SUBLW  D0
0B12:  BNZ   0B20
0B14:  MOVF   06,W
0B16:  SUBLW  07
0B18:  BNZ   0B20
0B1A:  CLRF   03
0B1C:  MOVLW  00
0B1E:  BRA    0B2E
0B20:  MOVLW  01
0B22:  ADDWF  05,W
0B24:  MOVWF  01
0B26:  MOVLW  00
0B28:  ADDWFC 06,W
0B2A:  MOVWF  03
0B2C:  MOVF   01,W
0B2E:  MOVWF  05
0B30:  MOVFF  03,06
....................    delay_ms(1); 
0B34:  MOVLW  01
0B36:  MOVWF  09
0B38:  BRA    0936
0B3A:  BRA    0990
....................    } 
.................... } 
0B3C:  SLEEP 

Configuration Fuses:
   Word  1: CC04   PLL5 CPUDIV1 NOUSBDIV HS FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
