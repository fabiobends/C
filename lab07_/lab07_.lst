CCS PCH C Compiler, Version 5.070, 56587               31-mai-17 08:33

               Filename:   C:\Users\Fábio Bends\Documents\PIC\lab07_\lab07_.lst

               ROM used:   974 bytes (3%)
                           Largest free fragment is 31790
               RAM used:   31 (2%) at main() level
                           43 (2%) worst case
               Stack used: 6 locations (5 in main + 1 for interrupts)
               Stack size: 31

*
0000:  GOTO   0362
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  FF2.5
0056:  GOTO   0060
005A:  BTFSC  FF2.2
005C:  GOTO   00AE
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVFF  15,FF5
009A:  MOVFF  16,FF6
009E:  MOVFF  17,FF7
00A2:  MOVF   04,W
00A4:  MOVFF  06,FE0
00A8:  MOVFF  05,FD8
00AC:  RETFIE 0
.................... #include <lab07_.h> 
.................... #include <18F4550.h> 
.................... //////////// Standard Header file for the PIC18F4550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F4550 
*
00F8:  DATA 54,65
00FA:  DATA 6D,70
00FC:  DATA 6F,3A
00FE:  DATA 0A,00
*
02B2:  TBLRD*+
02B4:  MOVF   FF5,F
02B6:  BZ    02D0
02B8:  MOVFF  FF6,1F
02BC:  MOVFF  FF7,20
02C0:  MOVFF  FF5,21
02C4:  RCALL  0262
02C6:  MOVFF  1F,FF6
02CA:  MOVFF  20,FF7
02CE:  BRA    02B2
02D0:  GOTO   03A6 (RETURN)
02D4:  MOVF   22,W
02D6:  CLRF   01
02D8:  SUBWF  21,W
02DA:  BC    02E2
02DC:  MOVFF  21,00
02E0:  BRA    02FA
02E2:  CLRF   00
02E4:  MOVLW  08
02E6:  MOVWF  23
02E8:  RLCF   21,F
02EA:  RLCF   00,F
02EC:  MOVF   22,W
02EE:  SUBWF  00,W
02F0:  BTFSC  FD8.0
02F2:  MOVWF  00
02F4:  RLCF   01,F
02F6:  DECFSZ 23,F
02F8:  BRA    02E8
02FA:  RETURN 0
02FC:  MOVF   01,W
02FE:  MOVFF  1F,21
0302:  MOVLW  64
0304:  MOVWF  22
0306:  RCALL  02D4
0308:  MOVFF  00,1F
030C:  MOVF   01,W
030E:  MOVLW  30
0310:  BNZ   0320
0312:  BTFSS  20.1
0314:  BRA    032E
0316:  BTFSC  20.3
0318:  BRA    032E
031A:  BTFSC  20.4
031C:  MOVLW  20
031E:  BRA    0326
0320:  BCF    20.3
0322:  BCF    20.4
0324:  BSF    20.0
0326:  ADDWF  01,F
0328:  MOVFF  01,21
032C:  RCALL  0262
032E:  MOVFF  1F,21
0332:  MOVLW  0A
0334:  MOVWF  22
0336:  RCALL  02D4
0338:  MOVFF  00,1F
033C:  MOVF   01,W
033E:  MOVLW  30
0340:  BNZ   034E
0342:  BTFSC  20.3
0344:  BRA    0356
0346:  BTFSS  20.0
0348:  BRA    0356
034A:  BTFSC  20.4
034C:  MOVLW  20
034E:  ADDWF  01,F
0350:  MOVFF  01,21
0354:  RCALL  0262
0356:  MOVLW  30
0358:  ADDWF  1F,F
035A:  MOVFF  1F,21
035E:  RCALL  0262
0360:  RETURN 0
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay(crystal=20MHz) 
*
0100:  CLRF   FEA
0102:  MOVLW  24
0104:  MOVWF  FE9
0106:  MOVF   FEF,W
0108:  BZ    0124
010A:  MOVLW  06
010C:  MOVWF  01
010E:  CLRF   00
0110:  DECFSZ 00,F
0112:  BRA    0110
0114:  DECFSZ 01,F
0116:  BRA    010E
0118:  MOVLW  7B
011A:  MOVWF  00
011C:  DECFSZ 00,F
011E:  BRA    011C
0120:  DECFSZ FEF,F
0122:  BRA    010A
0124:  RETURN 0
....................  
....................  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0150:  MOVLW  0F
0152:  ANDWF  F95,W
0154:  IORLW  F0
0156:  MOVWF  F95
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0158:  BSF    F8C.2
....................    delay_cycles(1); 
015A:  NOP   
....................    lcd_output_enable(1); 
015C:  BSF    F8C.0
....................    delay_cycles(1); 
015E:  NOP   
....................    high = lcd_read_nibble(); 
0160:  RCALL  0144
0162:  MOVFF  01,29
....................        
....................    lcd_output_enable(0); 
0166:  BCF    F8C.0
....................    delay_cycles(1); 
0168:  NOP   
....................    lcd_output_enable(1); 
016A:  BSF    F8C.0
....................    delay_us(1); 
016C:  BRA    016E
016E:  BRA    0170
0170:  NOP   
....................    low = lcd_read_nibble(); 
0172:  RCALL  0144
0174:  MOVFF  01,28
....................        
....................    lcd_output_enable(0); 
0178:  BCF    F8C.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
017A:  MOVLW  0F
017C:  ANDWF  F95,W
017E:  MOVWF  F95
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0180:  SWAPF  29,W
0182:  MOVWF  00
0184:  MOVLW  F0
0186:  ANDWF  00,F
0188:  MOVF   00,W
018A:  IORWF  28,W
018C:  MOVWF  01
018E:  GOTO   019C (RETURN)
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0144:  MOVF   F83,W
0146:  MOVWF  00
0148:  SWAPF  00,W
014A:  ANDLW  0F
014C:  MOVWF  01
....................   #endif 
014E:  RETURN 0
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0126:  SWAPF  29,W
0128:  ANDLW  F0
012A:  MOVWF  00
012C:  MOVLW  0F
012E:  ANDWF  F8C,W
0130:  IORWF  00,W
0132:  MOVWF  F8C
....................   #endif 
....................        
....................    delay_cycles(1); 
0134:  NOP   
....................    lcd_output_enable(1); 
0136:  BSF    F8C.0
....................    delay_us(2); 
0138:  MOVLW  03
013A:  MOVWF  00
013C:  DECFSZ 00,F
013E:  BRA    013C
....................    lcd_output_enable(0); 
0140:  BCF    F8C.0
0142:  RETURN 0
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0192:  BCF    F95.0
....................    lcd_rs_tris(); 
0194:  BCF    F95.1
....................    lcd_rw_tris(); 
0196:  BCF    F95.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0198:  BCF    F8C.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
019A:  BRA    0150
019C:  MOVFF  01,28
01A0:  BTFSC  01.7
01A2:  BRA    019A
....................    lcd_output_rs(address); 
01A4:  BCF    F8C.1
01A6:  BTFSC  26.0
01A8:  BSF    F8C.1
....................    delay_cycles(1); 
01AA:  NOP   
....................    lcd_output_rw(0); 
01AC:  BCF    F8C.2
....................    delay_cycles(1); 
01AE:  NOP   
....................    lcd_output_enable(0); 
01B0:  BCF    F8C.0
....................    lcd_send_nibble(n >> 4); 
01B2:  SWAPF  27,W
01B4:  MOVWF  28
01B6:  MOVLW  0F
01B8:  ANDWF  28,F
01BA:  MOVFF  28,29
01BE:  RCALL  0126
....................    lcd_send_nibble(n & 0xf); 
01C0:  MOVF   27,W
01C2:  ANDLW  0F
01C4:  MOVWF  28
01C6:  MOVWF  29
01C8:  RCALL  0126
01CA:  RETURN 0
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
01CC:  MOVLW  28
01CE:  MOVWF  20
01D0:  MOVLW  0C
01D2:  MOVWF  21
01D4:  MOVLW  01
01D6:  MOVWF  22
01D8:  MOVLW  06
01DA:  MOVWF  23
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
01DC:  BCF    F8C.0
....................    lcd_output_rs(0); 
01DE:  BCF    F8C.1
....................    lcd_output_rw(0); 
01E0:  BCF    F8C.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
01E2:  MOVLW  0F
01E4:  ANDWF  F95,W
01E6:  MOVWF  F95
....................   #endif 
....................    lcd_enable_tris(); 
01E8:  BCF    F95.0
....................    lcd_rs_tris(); 
01EA:  BCF    F95.1
....................    lcd_rw_tris(); 
01EC:  BCF    F95.2
....................  #endif 
....................      
....................    delay_ms(15); 
01EE:  MOVLW  0F
01F0:  MOVWF  24
01F2:  RCALL  0100
....................    for(i=1;i<=3;++i) 
01F4:  MOVLW  01
01F6:  MOVWF  1F
01F8:  MOVF   1F,W
01FA:  SUBLW  03
01FC:  BNC   020E
....................    { 
....................        lcd_send_nibble(3); 
01FE:  MOVLW  03
0200:  MOVWF  29
0202:  RCALL  0126
....................        delay_ms(5); 
0204:  MOVLW  05
0206:  MOVWF  24
0208:  RCALL  0100
020A:  INCF   1F,F
020C:  BRA    01F8
....................    } 
....................     
....................    lcd_send_nibble(2); 
020E:  MOVLW  02
0210:  MOVWF  29
0212:  RCALL  0126
....................    delay_ms(5); 
0214:  MOVLW  05
0216:  MOVWF  24
0218:  RCALL  0100
....................    for(i=0;i<=3;++i) 
021A:  CLRF   1F
021C:  MOVF   1F,W
021E:  SUBLW  03
0220:  BNC   023C
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0222:  CLRF   03
0224:  MOVF   1F,W
0226:  ADDLW  20
0228:  MOVWF  FE9
022A:  MOVLW  00
022C:  ADDWFC 03,W
022E:  MOVWF  FEA
0230:  MOVFF  FEF,27
0234:  CLRF   26
0236:  RCALL  0192
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0238:  INCF   1F,F
023A:  BRA    021C
023C:  GOTO   038E (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
0240:  DECFSZ 23,W
0242:  BRA    0246
0244:  BRA    024C
....................       address=LCD_LINE_TWO; 
0246:  MOVLW  40
0248:  MOVWF  24
024A:  BRA    024E
....................    else 
....................       address=0; 
024C:  CLRF   24
....................       
....................    address+=x-1; 
024E:  MOVLW  01
0250:  SUBWF  22,W
0252:  ADDWF  24,F
....................    lcd_send_byte(0,0x80|address); 
0254:  MOVF   24,W
0256:  IORLW  80
0258:  MOVWF  25
025A:  CLRF   26
025C:  MOVWF  27
025E:  RCALL  0192
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0260:  RETURN 0
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0262:  MOVF   21,W
0264:  XORLW  07
0266:  BZ    0276
0268:  XORLW  0B
026A:  BZ    0280
026C:  XORLW  06
026E:  BZ    0290
0270:  XORLW  02
0272:  BZ    029C
0274:  BRA    02A6
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0276:  MOVLW  01
0278:  MOVWF  22
027A:  MOVWF  23
027C:  RCALL  0240
027E:  BRA    02B0
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0280:  CLRF   26
0282:  MOVLW  01
0284:  MOVWF  27
0286:  RCALL  0192
....................                      delay_ms(2); 
0288:  MOVLW  02
028A:  MOVWF  24
028C:  RCALL  0100
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
028E:  BRA    02B0
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0290:  MOVLW  01
0292:  MOVWF  22
0294:  MOVLW  02
0296:  MOVWF  23
0298:  RCALL  0240
029A:  BRA    02B0
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
029C:  CLRF   26
029E:  MOVLW  10
02A0:  MOVWF  27
02A2:  RCALL  0192
02A4:  BRA    02B0
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
02A6:  MOVLW  01
02A8:  MOVWF  26
02AA:  MOVFF  21,27
02AE:  RCALL  0192
....................      #endif 
....................    } 
02B0:  RETURN 0
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................                    // Interrupção com o timer0 
.................... int8 cnt, seg, min;// definição de variáveis globais 
.................... #INT_TIMER0        // código da interrupção do timer0 
.................... void timer0_isr(){ 
....................   cnt=(cnt==184)?0:cnt+1; 
*
00AE:  MOVF   19,W
00B0:  SUBLW  B8
00B2:  BNZ   00B8
00B4:  MOVLW  00
00B6:  BRA    00BC
00B8:  MOVLW  01
00BA:  ADDWF  19,W
00BC:  MOVWF  19
....................   seg=(cnt==0)?((seg==59)?0:seg+1):seg;          // função que conta os segundos e 
00BE:  MOVF   19,F
00C0:  BNZ   00D2
00C2:  MOVF   1A,W
00C4:  SUBLW  3B
00C6:  BNZ   00CC
00C8:  MOVLW  00
00CA:  BRA    00D0
00CC:  MOVLW  01
00CE:  ADDWF  1A,W
00D0:  BRA    00D4
00D2:  MOVF   1A,W
00D4:  MOVWF  1A
....................   min=(cnt==0 && seg==0)?((min==59)?0:min+1):min;// minutos através da interrupção 
00D6:  MOVF   19,F
00D8:  BNZ   00EE
00DA:  MOVF   1A,F
00DC:  BNZ   00EE
00DE:  MOVF   1B,W
00E0:  SUBLW  3B
00E2:  BNZ   00E8
00E4:  MOVLW  00
00E6:  BRA    00EC
00E8:  MOVLW  01
00EA:  ADDWF  1B,W
00EC:  BRA    00F0
00EE:  MOVF   1B,W
00F0:  MOVWF  1B
00F2:  BCF    FF2.2
00F4:  GOTO   0060
....................   } 
....................    
.................... void main() 
*
0362:  CLRF   FF8
0364:  BCF    FD0.7
0366:  BSF    07.7
0368:  CLRF   1D
036A:  CLRF   1C
036C:  MOVF   FC1,W
036E:  ANDLW  C0
0370:  IORLW  0F
0372:  MOVWF  FC1
0374:  MOVLW  07
0376:  MOVWF  FB4
0378:  MOVLW  63
037A:  MOVWF  1E
....................   { 
....................   int8 seg_old=99; 
....................   // configura o timer0 para estourar em 5,4ms 
....................   setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1); 
037C:  MOVLW  88
037E:  MOVWF  FD5
....................   // outras rotinas de configuração  
....................   seg=0; min=0; cnt=0;           // inicialização de variáveis 
0380:  CLRF   1A
0382:  CLRF   1B
0384:  CLRF   19
....................   enable_interrupts(INT_TIMER0); // habilita interrupção timer0 
0386:  BSF    FF2.5
....................   enable_interrupts(GLOBAL);     // habilita interrupção global 
0388:  MOVLW  C0
038A:  IORWF  FF2,F
....................   lcd_init();                    // inicializa o LCD 
038C:  BRA    01CC
....................   while(TRUE){ 
....................   if(seg!=seg_old){              //  
038E:  MOVF   1E,W
0390:  SUBWF  1A,W
0392:  BZ    03CE
....................   lcd_gotoxy(1,1);               // posicionamento do texto 
0394:  MOVLW  01
0396:  MOVWF  22
0398:  MOVWF  23
039A:  RCALL  0240
....................   printf(lcd_putc,"Tempo:\n");   // texto 
039C:  MOVLW  F8
039E:  MOVWF  FF6
03A0:  MOVLW  00
03A2:  MOVWF  FF7
03A4:  BRA    02B2
....................   lcd_gotoxy(6,2);               // posicionamento do contador 
03A6:  MOVLW  06
03A8:  MOVWF  22
03AA:  MOVLW  02
03AC:  MOVWF  23
03AE:  RCALL  0240
....................   printf(lcd_putc,"%02u:%02u",min,seg);// contador 
03B0:  MOVFF  1B,1F
03B4:  MOVLW  01
03B6:  MOVWF  20
03B8:  RCALL  02FC
03BA:  MOVLW  3A
03BC:  MOVWF  21
03BE:  RCALL  0262
03C0:  MOVFF  1A,1F
03C4:  MOVLW  01
03C6:  MOVWF  20
03C8:  RCALL  02FC
....................   seg_old=seg;                   // novo valor para comparação 
03CA:  MOVFF  1A,1E
....................       }    
03CE:  BRA    038E
....................    } 
.................... } 
03D0:  SLEEP 

Configuration Fuses:
   Word  1: CC04   PLL5 CPUDIV1 NOUSBDIV HS FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 00A1   STVREN NOLVP ICSP2 NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
